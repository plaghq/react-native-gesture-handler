{"version":3,"sources":["ManualGestureHandler.ts"],"names":["ManualGestureHandler","GestureHandler","init","ref","propsRef","updateGestureConfig","enabled","props","onPointerDown","event","tracker","addToTracker","begin","onPointerAdd","onPointerMove","sourceEvent","cancelable","preventDefault","fail","track","onPointerOutOfBounds","onPointerUp","removeFromTracker","pointerId","onPointerRemove"],"mappings":";;;;;;;AACA;;;;AAEe,MAAMA,oBAAN,SAAmCC,uBAAnC,CAAkD;AACxDC,EAAAA,IAAI,CAACC,GAAD,EAAcC,QAAd,EAAkD;AAC3D,UAAMF,IAAN,CAAWC,GAAX,EAAgBC,QAAhB;AACD;;AAEMC,EAAAA,mBAAmB,CAAC;AAAEC,IAAAA,OAAO,GAAG,IAAZ;AAAkB,OAAGC;AAArB,GAAD,EAA6C;AACrE,UAAMF,mBAAN,CAA0B;AAAEC,MAAAA,OAAO,EAAEA,OAAX;AAAoB,SAAGC;AAAvB,KAA1B;AACD;;AAESC,EAAAA,aAAa,CAACC,KAAD,EAA4B;AACjD,SAAKC,OAAL,CAAaC,YAAb,CAA0BF,KAA1B;AACA,UAAMD,aAAN,CAAoBC,KAApB;AACA,SAAKG,KAAL;AACD;;AAESC,EAAAA,YAAY,CAACJ,KAAD,EAA4B;AAChD,SAAKC,OAAL,CAAaC,YAAb,CAA0BF,KAA1B;AACA,UAAMI,YAAN,CAAmBJ,KAAnB;AACD;;AAESK,EAAAA,aAAa,CACrBL,KADqB,EAErBM,WAFqB,EAGf;AACN,QAAIA,WAAJ,aAAIA,WAAJ,eAAIA,WAAW,CAAEC,UAAjB,EAA6B;AAC3BD,MAAAA,WAAW,CAACE,cAAZ;AACD,KAFD,MAEO,IAAIF,WAAJ,EAAiB;AACtB,WAAKG,IAAL;AACD;;AAED,SAAKR,OAAL,CAAaS,KAAb,CAAmBV,KAAnB;AACA,UAAMK,aAAN,CAAoBL,KAApB;AACD;;AAESW,EAAAA,oBAAoB,CAC5BX,KAD4B,EAE5BM,WAF4B,EAGtB;AACN,QAAIA,WAAJ,aAAIA,WAAJ,eAAIA,WAAW,CAAEC,UAAjB,EAA6B;AAC3BD,MAAAA,WAAW,CAACE,cAAZ;AACD,KAFD,MAEO,IAAIF,WAAJ,EAAiB;AACtB,WAAKG,IAAL;AACD;;AAED,SAAKR,OAAL,CAAaS,KAAb,CAAmBV,KAAnB;AACA,UAAMW,oBAAN,CAA2BX,KAA3B;AACD;;AAESY,EAAAA,WAAW,CAACZ,KAAD,EAA4B;AAC/C,UAAMY,WAAN,CAAkBZ,KAAlB;AACA,SAAKC,OAAL,CAAaY,iBAAb,CAA+Bb,KAAK,CAACc,SAArC;AACD;;AAESC,EAAAA,eAAe,CAACf,KAAD,EAA4B;AACnD,UAAMe,eAAN,CAAsBf,KAAtB;AACA,SAAKC,OAAL,CAAaY,iBAAb,CAA+Bb,KAAK,CAACc,SAArC;AACD;;AAxD8D","sourcesContent":["import { AdaptedEvent, Config } from '../interfaces';\nimport GestureHandler from './GestureHandler';\n\nexport default class ManualGestureHandler extends GestureHandler {\n  public init(ref: number, propsRef: React.RefObject<unknown>) {\n    super.init(ref, propsRef);\n  }\n\n  public updateGestureConfig({ enabled = true, ...props }: Config): void {\n    super.updateGestureConfig({ enabled: enabled, ...props });\n  }\n\n  protected onPointerDown(event: AdaptedEvent): void {\n    this.tracker.addToTracker(event);\n    super.onPointerDown(event);\n    this.begin();\n  }\n\n  protected onPointerAdd(event: AdaptedEvent): void {\n    this.tracker.addToTracker(event);\n    super.onPointerAdd(event);\n  }\n\n  protected onPointerMove(\n    event: AdaptedEvent,\n    sourceEvent: PointerEvent | TouchEvent\n  ): void {\n    if (sourceEvent?.cancelable) {\n      sourceEvent.preventDefault();\n    } else if (sourceEvent) {\n      this.fail();\n    }\n\n    this.tracker.track(event);\n    super.onPointerMove(event);\n  }\n\n  protected onPointerOutOfBounds(\n    event: AdaptedEvent,\n    sourceEvent: PointerEvent | TouchEvent\n  ): void {\n    if (sourceEvent?.cancelable) {\n      sourceEvent.preventDefault();\n    } else if (sourceEvent) {\n      this.fail();\n    }\n\n    this.tracker.track(event);\n    super.onPointerOutOfBounds(event);\n  }\n\n  protected onPointerUp(event: AdaptedEvent): void {\n    super.onPointerUp(event);\n    this.tracker.removeFromTracker(event.pointerId);\n  }\n\n  protected onPointerRemove(event: AdaptedEvent): void {\n    super.onPointerRemove(event);\n    this.tracker.removeFromTracker(event.pointerId);\n  }\n}\n"]}